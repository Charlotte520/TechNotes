10.vim
一般模式：移动光标，删除，复制，粘贴。i/o/a/r进入编辑模式。:/?进入命令行模式：查找、读取、保存、替换等。
30->：向右移动30个字符。G：文件最后一行。gg：第一行。nG：第n行。:n1,n2s/word1/word2/gc: 在n1到n2行之间找word1,并替换为word2. nx：向后删除n个字符。dd：删一行。ndd：删n行。yy：复制一行。nyy。p：paste。u：复原前一个操作。ctrl-r：重做。.：重复前一个操作。:n1,n2 w [filename]：数据写入新文件。:r [filename]: 读入新文件。：sp：多窗口。
f.swap：暂存对f的操作，用于恢复。vim正常退出时删除。
ctrl-v：visual block，光标移动的地方反白，可复制、删除等。
环境配置：~/.vimrc。记录操作：~/.viminfo

11. bash

16. crontab
仅执行一次：/etc/init.d/atd restart  开机启动用chkconfig atd on
生成job：at [-mldv] TIME，job写入/var/spool/at/目录，等atd执行。用/etc/at.allow, at.deny限制可执行at命令的用户。atq查询job；atrm jobid 删除。 batch命令，cpu load<0.8时才执行job。load：cpu单一时间点负责的工作数量。

循环执行：crond 每分钟读取一次/etc/crontab和/var/spool/cron/
生成job：crontab [-u username] [-l|e|r]， 写入/var/spool/cron/目录。-e进入vi编辑界面。
系统配置：/etc/crontab，修改后重启crond。

唤醒停机期间的job：anacron，读取timestamps文件，分析与当前时间之差，若有diff，执行crontab。
anacron的运行时间：开机期间；写入crontab调度。

17. 程序管理 & selinux
program：二进制程序存放在存储介质，物理文件； process：触发程序后，执行者的权限与属性、code、data等加载到内存，os分配pid，正在运行中的程序。父子进程用ppid关联。
fork-exec: 父进程pid为x，程序为zzz，fork后，产生完全相同的临时进程，pid为y，ppid为x，程序为zzz。再exec执行目标进程，pid为y，ppid为x，程序为qqq。

bash环境下的job control：登录取得bash后，在单个tty下同时运行多个job。执行命令的环境为foreground工作；自行运行的为background job，不能ctrl-c，不能等shell input。
直接丢到bg运行：cmd &。前台丢到后台：ctrl-z，状态为stopped，再用jobs查看jobid，bg %id即可run。bg到fg：fg %id。结束后台：kill -l(1 reload；2 ctrl-c；9 强制删除；15 正常结束)。
远程连接到主机，运行bg job，脱机后会中断。用nohup cmd在前台运行，nohup cmd & 在后台运行，脱机不中断。

查看某时间点的进程：ps aux | grep "name" 查看系统所有进程；  ps -l 查看自己bash相关的进程。stat：running、sleep（idle但可以被signal唤醒）、d（不可被唤醒的睡眠状态，如等io）、t（stop）、zombie（已终止但无法移出mem，交给init，若过段时间系统仍无法处理，reboot）
查看动态的进程：top -d num，每num秒更新一次。  top [-bnp] ： b批次执行，和n搭配，指定输出次数，可将结果重定向到文件。p指定pid。
pstree：进程树。

进程调度：priority+nice。priority是内核动态确定的，nice可修改，-20~19。执行新命令：nice [-n num] cmd。进程调整：renice [num] pid。nice可父子传递。

查看内存：free [-b|k|m|g] [-t]  swap used最好不超过20%
查看内核：uname -a
系统启动时间和工作负载：uptime
网络：netstat -[atunlp] : a all; t tcp; u udp; n 端口号；l 服务名；p pid。
内核产生的信息，记录到内存的某保护段：dmesg | more。
系统资源变化（cpu、mem、disk io）：vmstat
/proc/*：进程在内存中，内存的数据写入/proc/目录，每个pid一个目录。
通过文件找正在使用该文件的进程：fuser [-umv] [-k [i] [-signal]] file/dir
查看进程打开的文件：lsof [-aUu] [+d]
根据程序名找pid：pidof [-sx] name

18. 系统服务daemons
可独立启动的daemon：加载到内存后一直占用资源，eg httpd, vsftpd。通过super daemon(xinetd)唤起的daemon：有client请求时，xinetd触发进程加载到内存，eg telnet。super daemon可multi thread，或single thread处理请求。
daemon工作形态：signal-control，有client请求时立即处理，eg 打印机cupsd。interval control，隔断时间执行，eg crond。
启动脚本：环境检测、conf分析、pid文件放置、lock重要交换文件。/etc/init.d/*：系统服务的script。/etc/sysconfig/*：系统服务的初始化配置。/etc/xinetd.config：super daemon的配置，他管理的daemon配置在/etc/xinet.d/*。/etc/*：各服务的config。/var/lib/*：服务产生的数据库。/var/run/*：服务记录pid。
启动方式：/etc/init.d/script；  services name (start|stop|restart|..)，通过/sbin/service程序启动。
开机启动：chkconfig --list serviceName：检查是否开机启动；chkconfig [--level [012345]] [serviceName] [on|off]



20. log
daemon进程：syslogd, klogd, logrotate

syslog配置：/etc/syslog.conf:   
serviceName[.=!]loglevel  path  
默认服务有：cron, mail, daemon, news, syslog等，app可调用这些服务记录log。
loglevel有： none、info、notice、warning、err、crit、alert、emerg。
path：filepath、打印机、@ip、usernname、* 在线的所有人
配log server，其他host将log都传到server：修改server的config：SYSLOGD_OPTIONS="-m 0 -r"； 重启：/etc/init.d/syslog restart; 查看端口netstat -lunp | grep syslog, 默认udp：514。  client配：*.* @serverip 重启。

路径：/var/log/   : 记录 日期时间；主机名；服务名/函数名；实际数据。
chattr +a /var/log/syslog： append only，不可删除、修改等。

logrotate配置：/etc/logrotate.conf 默认值; /etc/logrotate.d/ 详细设置。
/var/log/syslog {
  weekly
  rotate 4
  create 
  compress
  sharedscripts
  prerotate
    /user/bin/chattr -a /var/log/syslog
  endscript
  sharedscprits
    /bin/kill -HUP syslogd
    /user/bin/chattr +a /var/log/syslog
  postrotate
  endscript
}
将logrotate加入crontab定期执行。测试：logrotate [-vf] /etc/logrotate.conf

1.内存
内核访问物理内存，为每个进程提供独立、连续的虚拟地址空间，包括：内核空间（进程在内核态，关联到相同的物理内存）、用户空间（进程在用户态）。32位系统：高处内核空间1G，低处用户3G。64位系统：内核128T，用户128T，其他未定义。
只有实际使用的虚拟内存才分配物理内存，通过内存映射管理：每个进程一个页表，记录虚拟地址到物理地址的映射关系。若进程访问的虚拟地址在页表查不到，产生缺页异常，进入内核空间分配物理内存、更新页表，返回用户空间继续运行。页表存储在CPU的MMU（4KB），TLB是页表的cache（减少进程上下文切换，可减少TLB刷新次数，提高TLB命中率，提高cpu内存访问性能）。4GB/4KB有100w页表项：多级页表（4级），大页（2MB，1GB，用于使用大量内存的进程，如oracle）。
进程的虚拟空间：低->高。只读段：代码、常量。数据段：全局变量。堆：动态分配，从低到高增长。文件映射段：dll、共享内存等，从高到低增长。栈：局部变量、函数调用上下文，固定大小8MB。分配：malloc()，分配小块内存（<128K），用brk()，移动堆顶位置，释放后不立即归还系统，而是被缓存起来重复使用。可减少缺页异常，但有碎片。大块内存(>128K)，用mmap()找空闲内存分配，释放时归还系统，缺页异常多。malloc调用时不分配，在首次访问时才通过缺页异常进入内核分配。用free(),unmap()释放。
内核：伙伴系统，合并相邻页，减少碎片。小对象用slab分配。系统内存紧张时，回收内存：cache（LRU）；不常访问的内存，通过swap写磁盘；OOM杀死进程（根据进程使用cpu、mem的情况更新oom_score，可用oom_adj调整）。
查看内存使用：整个系统内存使用 free：查看mem和swap的total、used、free、shared、buf/cache、available（包括未使用、可回收内存）。某进程：top、ps：virt、res（常驻内存大小）、shr、








