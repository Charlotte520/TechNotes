1.为什么用自增列为主键
创建表时定义的primary key；若无primary key，用第一个unique key not null列；若无，用隐含rowid(6B)。
数据按主键顺序，存在主索引b+树的叶节点。insert时，根据主键插入适当节点和位置，当页面达到load factor(15/16)时，开辟新页节点。若用自增主键，按顺序插入当前索引节点的后续位置；若非自增，插入位置随机，需要移动数据、分页等开销，产生碎片。=》尽量用自增列为rowkey。
2. b+树索引 vs hash索引
b+树有序，hash无序：hash不能范围查询；不能对索引排序；不支持联合查询的最左匹配。适合无大量重复key，等值查询。innodb默认用b+树索引，实时观察搜索模式，根据监控表上索引的使用情况，用index key的前缀自动在内存创建“自适应hash index缓冲区”，加速等值查询。但负载高时，hash index增加的read/write锁会带来竞争；like、%通配符不适合hash index，要关闭。
3.不适合建索引的情况
record太少；经常插入、删除、修改；数据重复、分布平均的字段。
