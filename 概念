1. 悲观锁 vs 乐观锁：
每次读写数据要加锁，效率低。 vs 字段+version，写回时检查version，相同则更新，否则重新读。适合冲突不多的情况，否则不断尝试反而降低性能。

2. LDAP：解决用户统一认证问题
树存储，按层查询，无事务，快。数据量大，易复制。适合读多写少。

3. Netty
单体应用：同一机器上进程内的函数调用，效率高。=》rpc：慢，用http协议，无用消息太多，效率低。=》精简协议，只发要调用的方法、参数。用socket。
java socket：blocking io：一个线程一个socket连接，连接很多时，占空间大，线程切换开销大。且大量线程处于等待数据的状态，资源浪费。=》non-blocking io：多路复用，一个线程处理多个socket。线程通过selector检查socket集合，哪个socket的数据ready，就去处理哪个socket。
java nio：要实现高性能rpc框架，要自定义调用协议、数据格式、次序。=》netty：基于nio的网络框架，封装nio底层细节。dubbo，基于netty的rpc框架。

4. 无状态
无状态方法：纯函数，相同的输入总得到相同的输出，不依赖于外界状态。适合单cpu并发、多cpu并行，易scale out。如http。
若要用session保存状态，如购物车，可将状态转移存储到另外地方，如redis，尽量使server无状态。
不可变对象：没有实例变量，或实例变量为final。该对象一旦创建不可修改，一旦修改返回新对象。 若实例变量的方法也是无状态方法，也可以。若要共享变量，可用threadlocal将变量存到线程中。


