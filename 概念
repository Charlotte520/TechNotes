1. 悲观锁 vs 乐观锁：
每次读写数据要加锁，效率低。 vs 字段+version，写回时检查version，相同则更新，否则重新读。适合冲突不多的情况，否则不断尝试反而降低性能。

2. LDAP：解决用户统一认证问题
树存储，按层查询，无事务，快。数据量大，易复制。适合读多写少。

3. Netty
单体应用：同一机器上进程内的函数调用，效率高。=》rpc：慢，用http协议，无用消息太多，效率低。=》精简协议，只发要调用的方法、参数。用socket。
java socket：blocking io：一个线程一个socket连接，连接很多时，占空间大，线程切换开销大。且大量线程处于等待数据的状态，资源浪费。=》non-blocking io：多路复用，一个线程处理多个socket。线程通过selector检查socket集合，哪个socket的数据ready，就去处理哪个socket。
java nio：要实现高性能rpc框架，要自定义调用协议、数据格式、次序。=》netty：基于nio的网络框架，封装nio底层细节。dubbo，基于netty的rpc框架。

4. 无状态
无状态方法：纯函数，相同的输入总得到相同的输出，不依赖于外界状态。适合单cpu并发、多cpu并行，易scale out。如http。
若要用session保存状态，如购物车，可将状态转移存储到另外地方，如redis，尽量使server无状态。
不可变对象：没有实例变量，或实例变量为final。该对象一旦创建不可修改，一旦修改返回新对象。 若实例变量的方法也是无状态方法，也可以。若要共享变量，可用threadlocal将变量存到线程中。

5. xml
dtd/schema：校验；xpath：快速找到特定节点；xsl/xslt：xml转换为其他格式，如html。
数据传输&交换（跨平台语言）；配置文件；描述任务和流程（如ant）；web service的接口描述；界面描述（微信xaml）。
=》数据交换用json（数据量小，简洁，但缺少数据验证）；配置文件用java annotation；soa被restful替代。

6.web 编程
web页面：html 结构、css 展示、js 行为。dom模型。通过模板生成页面。如何展示业务发来的数据。 
browser和server交互：http协议。Get,post请求；无状态协议，状态用cookie；http状态码；同步vs 异步。
url和代码映射：规则用代码、注解、配置定义。业务代码用mvc框架组织。数据验证、转换、绑定。对象转为xml/json string。
db访问：jdbc connection、statement、resultset。or mapping框架：hibernate、mybatis。ror activerecord。  表关联：一对多、一对一、多对多如何用oo表示。连接池、事务、锁等。

7. restful
传统url：面向过程，getBook、addBook等，以动词为主。
restful url：面向资源。get /books; get /books/1; post /books; put /books/1; delete /books/1。 服务端无状态，client每次请求将session一起发送。轻量。

8. tcp/ip
为什么要三次握手？确认双方都能双工通信。a先发给b（1），b回复a(2），b可确认a能发且b能收。a收到b的回复，可确认a能发且收，且b能收发。a再发给b（3）,b收到后确认a能收且b能发。
虚电路：建立虚拟连接，所有消息从同一通道发送。不发消息时，通道闲置。=》分组交换：不需要建立真正的连接通道，每个pkg的通道可能不一样，完全由中间节点确定下一路径。中间节点不保证可靠连接，消息可能失序、重复、丢失，由两个端点保证可靠。
可靠传输：数据编号；超时/失败重传；连续发送，窗口满暂停发，ack来移动窗口，继续发。回退N步协议：失败分组及其以后的全部重发。选择性重传：仅重传失败分组，其后的缓存。
socket：ip不可靠的节点通信，tcp两主机进程间通过失败重传实现的可靠传输。socket是os在tcp/udp上提供的抽象，由内核实现三次握手、累计确认、分组缓存等，包括(client ip, client port, server ip, server port)
client： 
clientfd=socket(xx);
connect(clientfd, serverip, serverport,xx); //os自动获取client ip，分配port。实际对应三次握手
send(clientfd, data);
receive(clientfd,xx);
close(clientfd);

server: 
listenfd = socket(xx); //为监听端口而创建的socket描述符。(clientip:0.0.0.0, client port:*, serverip:192.168.0.1, server port:80)
bind(listenfd, serverip, serverport,xx);//要求占用端口
listen(listenfd,xx); //开始监听
while(true) {
  connfd = accept(listenfd,xx); //对应connect，完成三次握手。(clientip:192.168.1.1, client port:12368, serverip:192.168.0.1, server port:80)，可区分不同的client连接。
  receive(connfd,xx);
  send(connfd,xx);
}


9. cpu & 进程 & 线程
批处理系统 =》多道程序：os将进程load到内存时修改内存地址（静态重定位）。内存紧缩时要移动进程=》动态重定位，需要记录每个进程的起始地址，并用专门的寄存器保存。 防止访问别的进程的内存地址 =》记录进程长度，判断是否越界。将寄存器、计算内存地址的方法，封装为MMU内存管理单元。
程序局部性原理（时间，空间） =》 分块装载，先装载最重要的代码，再按需装载其他。 虚拟内存，os管理 虚拟页->物理页，最常访问的页表放到cache；物理页不存在时，产生缺页中断，os从disk取页。 =》程序分为代码段、数据段、堆栈段、共享段，os记录段的起始位置、长度、段保护位，段内分页管理。程序访问不属于自己的段，产生segment fault，被os kill，并生成core dump。
进程：程序+PCB（PC、函数调用栈帧、栈顶（在EBP、ESP寄存器中），打开的文件句柄，程序段、数据段的地址，已用cpu时间、等待cpu时间等），根据pcb上下文切换。
线程：带自动保存的文字处理，若用两进程实现：p1和用户交互，p2自动保存。但进程相互独立，地址空间独立、通信开销大。=》共享进程资源，如地址空间、全局变量、文件资源等，pc、寄存器、函数调用堆栈等独立。若在用户空间实现线程，os仅处理进程，某线程阻塞会导致整个进程阻塞，效率低。若内核实现线程，内核维护进程表、线程表，每次创建线程都经过os，慢。=》混合：用户空间的进程可创建用户线程，内核可创建内核线程，用户线程bind到内核线程。=》进程通信、线程同步等问题。
fork()：两次返回，给父进程返回子进程pid，给子进程返回0，两个都从fork的下一行代码开始执行。子进程完全复制父进程的所有资源，包括代码、数据、堆、栈等。exec()：子进程装载新程序，替换代码段，重置堆、数据段、栈等。
协程：比线程更轻量级，不用os参与，相当于用户态线程，开销小。合作，同一时刻只有一个运行，底层用一个线程执行。不用加锁，用同步实现了异步。
def producer(c):
  while(true):
    value = 生成数据
    c.send(value) //发送数据后暂停，等cpu控制权从对方转移过来
def consumer():
  while(true):
    value = yield //等数据到来取出，再次循环到yield，暂停。生产者继续
    print(value)
c = consumer()
producer(c)


10.网卡
如何获取ip？应用层 DHCP广播：dhcp报文->udp报文：dst port：67,src port：68->ip报文：dst ip:255.255.255.255, src ip: 0.0.0.0 -> 以太网帧: dst: FF:FF:FF:FF:FF:FF, src：mymac。 DHCP server收到报文后分配一个内网ip 192.168.1.2。本机收到ip后，确认该ip，广播。dchp server再次确认该ip的分配，并返回网关ip，dns ip。
dns访问：ARP广播。arp报文：dst：FF:FF:FF:FF:FF:FF, src：mymac。网关路由器返回mac。本机将消息发给网关，出局域网后由各路由器转发到dns server。
NAT：ISP给网关一个外网ip：61.52.247.112，内网向外发数据时，网关将src ip/port改成外网ip:port2，并在nat表记录：外网ip:port2 -> 内网ip:port。返回数据改dst ip:port。
Upnp：p2p网络中，主机主动要求网关建立nat映射，内网ip:port <-> 外网ip：port2，使主机作为一个电驴server，将外网连接请求转发到内网ip:port。

11. 文件
disk：柱面、磁头、扇区 -》逻辑块。 
文件用到哪些磁盘块？连续记录：随机访问效率高，知道开头、长度、某地址，可立即定位。但删除后的碎片无法充分利用。链式：随机访问每次都得从第一块开始，效率低。索引式：专门有磁盘块存放文件属性、使用的磁盘块，inode。 目录也是inode，包括目录属性、存放目录内容的磁盘块号，磁盘块中放目录下的内容。
删除文件：在目录中删除文件；释放inode到空闲节点池；释放磁盘块到空闲磁盘块池。 多步操作，某步骤出错，整个目录和文件就乱了 =》log：操作前，先记log到disk，操作完后再删除log项。要求：可redo的操作必须能重复执行，且不会带来破坏。
空闲块管理：链表，每个磁盘块号32bit，5亿磁盘，需要2G磁盘。=》bitmap：每个磁盘块用一个bit表示，0/1。
文件系统：MBR（master boot record）+各磁盘块分区。MBR中有boot loader引导程序、磁盘分区表。分区表记录每个分区的start pos，那个分区是active，有64B，每个item 16B，只能有4个分区，多于4时将其中一个设为扩展分区，在其中继续划分逻辑分区。每个分区有引导块、多个块组。系统找到分区start pos，加载分区的引导块（存本分区的os）。每个块组有磁盘块bitmap、inode bitmap、inode表和数据块。

12. IO设备
块设备：磁盘、cd-rom、u盘等，数据存储在固定大小的块中，每个块都有地址。字符设备：键盘、鼠标、打印机等，字符流，没有地址。设备挂到io总线，有io端口编号，并可映射到内存，使cpu像访问内存一样访问io设备。
cpu向设备驱动器发指令，挂起进程，设备完成后，通过中断控制器发中断请求（优先级），cpu执行中断处理程序（上下文切换等），处理数据。异步、事件驱动。
DMA：大量数据传输到内存。

13. lock：共享变量
自旋锁：进程运行时，检查lock是否为ture，若为false，无限循环，直到cpu时间到，不阻塞，进入ready状态，等下次调度接着抢lock。os提供的test_and_set(lock)，保证检测lock是否为true，并设置lock为true，为原子操作。锁住总线，多cpu也不会乱。 =》递归时会死锁，不能重新进入同一函数（不可重入）。
reentrant lock：每次申请锁后，记录是谁申请的，用counter记录重入次数。下次持有锁的进程再申请时，counter+1。释放时，counter-1,直到0时释放锁。且若抢不到lock，不要无限循环，阻塞到等待队列（加是否公平的参数）。等待时间参数：申请时等x秒，得不到就放弃。

Semaphore:互斥/同步问题 内核实现wait,signal操作，保证原子。
int s;
wait(s){
  while(s<=0) ; //忙等
  s--;
}
signal(s){s++;}

typedef struct {
  int v;
  struct process *list;
} semaphore;
wait(semaphore *s) {
  s->v--;
  if (s->v < 0) {
    当前进程加到list；
    block(); //阻塞放弃cpu
  }
}
signal(semaphore *s) {
  s->v++;
  if (s->v <=0){
    从list取出一个进程；
    wakeup(p);
  }
}
1) 互斥
int lock = 1;
wait(lock);
signal(lock);
2)消费者生产者同步问题
int lock = 1; int empty = 10; int full = 0; 
生产者：
while(true) {
  wait(empty);//empty<0时等待
  wait(lock);//加锁操作队列
  signal(lock);//释放锁
  signal(full);//通知消费者
}
消费者：
while(true) {
  wait(full);
  wait(lock);
  signal(lock);
  signal(empty);
}
java封装：多个线程都获得同一lock：Semaphore lock = new Semaphore(10);    线程调用lock.acquire()/release()
生产消费：BlockingQueue

读写分离：ReadWriteLock，ReentrantReadWriteLock。
某线程等其他线程完成后再执行：CountDownLatch，某线程执行完counter-1,直到0时等待线程开始。
多个线程互相等待，都ready时再开始：CyclicBarrier。
synchronized：互斥锁，悲观锁。=> CAS：CompareAndSwap，不加锁。更新流程为：（1）从内存读value A；(2）B=A+1得到B；(3）用A和内存值比较，若相同则写入B，否则回到（1）。硬件指令CAS保证原子。但CAS需要频繁读写内存，适合简单类型数据，复杂结构应用悲观锁。
AtomicInteger a = new AtomicInteger(10);
while(true) {
  int current = a.get();
  int b = current+1;
  if (c.compareAndSet(current,b)) {return b;}  //java通过JNI调用C实现的CAS，AtomicInteger里包括内存的值。
}
AtomicReference：比较复杂对象的引用是否被修改过。ABA问题：值先为a，改为b，再改为a =》每个AtomicReference对象加version，AtomicStampedReference

14. db
1)隔离级别
丢失修改：AB进程写同一数据，A将B的数据覆盖了。=》写数据时加排他锁X，直到事务结束，读不加锁。能避免丢数据，但可读到没提交或回滚的内容。read uncommited。
脏数据：进程A在进程B执行过程中读取数据，B再rollback，A读到脏数据。=》读数据时加共享锁S。若数据加X锁，则不能加S锁，若数据加S锁，则不能加X锁，但可以再加S锁，且S锁在读完数据后立即释放。read committed。
无法重复读：由于S锁读完立即释放，A先加S锁读数据x，释放S锁。B加X锁修改数据为y。A再读x失败。=》S锁一直锁定，直到事务提交。repeatable read。默认。
幻读：A先用X锁锁定age>18的行，修改。B插入age>18的行。A再次确认，会发现多一行。=》串行执行。Serializable。
MVCC：读不用加锁，写加锁。隐藏列：事务id（每次开始新事务递增），回滚指针。ReadView：当前活跃事务列表；Tmin；Tmax。
2)原子性 
undo log：幂等，可以多次恢复。若看到提交/回滚T1,说明事务已结束，不需恢复。只看到开始，需要按原数据恢复，再加上[回滚事务T1]，下次不用再恢复。每次先将undo log从日志缓冲区写入磁盘，再将修改后的数据写入db文件。所有修改后的数据写入磁盘文件后，再写入[提交]到log文件。
[开始事务T1]
[事务T1,row 1原数据，value1]
[事务T1,row 2原数据，value2]
[提交事务T1]

15. 输入网址到浏览器呈现内容
输入网址，发udp包给dns server，得到ip。
browser发http请求，建立tcp连接(本机ip，随机分配的本机port，server ip，固定server port，如80)。
经过路由器转发，到达server端。web server：可用一个线程处理请求，同一时刻只能处理一个，性能差；每个请求分配一个进程/线程，连接太多时内存消耗大，切换开销大；复用IO，epoll监听所有连接，有数据可读时，用进程/线程处理（nginx）。判断：若是静态请求，读取本地文件，返回。若是动态请求，发给后端server（轮询、权重、ip_hash、fair）。app server（tomcat，rose容器）：可为每个请求分配一个线程（BIO）；若干线程处理所有请求（NIO）。将HttpRequest交给某个servlet，转换为框架的参数格式，转给某Controller。
HttpResponse发给browser后，http1.1默认keep-alive，不关闭tcp连接。http1.0要看request header中有没有Connection：keep-alive。复用连接通道，在同一个连接中下载css、img、js等资源。
browser获取html页面后，对其中引用的其他资源js、css、图片等，建立tcp连接，并行下载。server发文件时，通过cache-control、expire说明过期时间。过期后，browser根据上次发的last-modified和etag询问server有没有修改，若返回304 not modified，可继续用cache，否则发新文件。
browser将html变成dom tree，css变成css rule tree，生成render tree，计算每个元素的位置、大小、布局，用os api绘制。
websocket：web版在线协作，要频繁向server发数据，且每次发送信息很少，用http请求无用消息太多。股票、朋友圈更新如何从server push到client？=》不要http header；browser、server能互发数据。但又想利用http的基础设施（cache、防火墙、代理等），所以websocket兼容http。建立连接时用http，此后双向通信。

16.浮点数为什么不精确：
10进制的小数，计算机内部无法用二进制小数精确表达，只能用1/2^n逼近。

17. actor模型（erlang）
解决多线程加锁的问题。系统由很多actor组成，actor间不共享状态，但可接收其他actor的异步消息，内部用mailbox缓存。适合多个组件独立工作，相互间仅靠消息传递的情况。若要在多组件间维持一致的状态，akka框架提供coordinated/transactor机制。

18. java
1)泛型
没有泛型时：List list = new ArrayList(); list.add(10); list.add("hi"); list可容纳任何类型，但需要在使用时强制类型转换，否则运行时class cast exception。=》泛型，编译时检查。
泛型类/接口：class ArrayList<T> implements List<T> {}  c++每次实例化泛型/模板类时，都生成一个新类，如List_String, List_int。java：ArrayList<T>擦除参数变成ArrayList，T为Object，编译时自动转型：String s=(String)list.get(0);
泛型方法：public static <T extends Comparable<T>> T max(List<T> list);要求T必须是Comparable子类。或者Comparable<? super T>
泛型的继承：class Apple extends Fruit，但ArrayList<Apple>和ArrayList<Fruit>没有继承关系。方法hello(ArrayList<Fruit> list)想要能用ArrayList<Apple>，需要定义:hello(ArrayList<? extends Fruit> list)
2)动态代理 & CGLib
class加载到方法区后不能修改，无法运行时动态修改类（方法），不能声明式编程。通过AOP动态生成代理类，读取xml的声明，找到需要插入log的类和方法，修改之。
interface I {
  void hello();
}
class C implements I {
  void hello() {print("hi");}
}

class LoggerHandler implements InvocationHandler {
  private Object target;
  public LoggerHandler(Object target) {this.target = target;}
  public Object invoke(Object proxy, Method method, Object[] args) {
    Logger.startLog();
    Object result = method.invoke(target, args);
    Logger.endlog();
    return result;
  }
}

I o = new C();
LoggerHandler h = new LoggerHandler();
I proxy = (I) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), o.getClass().getInterfaces(), h); 动态生成类，在调用其方法时实际调用LoggerHandler.invoke，在其中添加log。
proxy.hello();

CGLib：
3) annotation：配置管理
集中配置时用xml（如数据源）；对@Controller, @RequestMapping, @Transactional等注解，和java方法写在一起。
annotation类似于加强版注释，有格式和含义，由特定工具读取。如@Override，由编译器检查该方法是否和父类方法、参数相同。
自定义注解：元注解
@Retention(RetentionPolicy.RUNTIME) //保留到什么时候，source，class，runtime
@Target(ElementType.METHOD) //注解目标，type、method、field，parameter等
public @interface Test {
  boolean ignore() default false;
}

用反射实现：
for (Method m: obj.getClass().getMethods()) {
  Test t = m.getDeclaredAnnotation(Test.class);
  if (t!= null && !t.ignore()) {m.invoke(obj);}
}
4) 分布式事务
两阶段提交：强一致，效率低。
消息队列：最终一致，先用本地事务：写a-20到本地表，且b+20写入事件表。后台线程读事件表，发到mq，磁盘存储。consumer读取mq（幂等），执行本地事务。
5) heap
可达性分析算法。新生代：eden:survivor1:survivor2=8:1:1，minor GC；老年代，Full GC。复制算法，s1，s2只用一个。80%的eden对象经过一次GC就删除得差不多了。GC时将eden和s1的live obj复制到s2，放不下时放入老年代。
off-heap：java进程的堆外内存，ByteBuffer b = ByteBuffer.allocateDirect(1024*1024*128); b被GC时，off-heap空间才释放。适合分配次数少，读写频繁的场景。如Netty 对象池。
6)ThreadLocal
class A中定义变量x；A层层调用其他类，到class B需要访问x。若将x作为参数层层传递，改动太多。若将x作为static，有多线程并发的问题 。ThreadLocal用来维护本线程的变量，用map保存。
class Context {
  private static final ThreadLocal<String> m = new ThreadLocal<String>();
  public static void setId(String id) {
    m.set(id);
  }
  public static String getId() {
    return m.get();
  }
}
7)IO
stream:顺序读，字节流。reader/writer：字符流。
reader.readLine();//阻塞，不适合socket大量连接的情况
nio：
channel注册到selector  //channel代表客户端连接，每个都是一个socket连接，告诉selector要监听x事件。selector管理多个channel。
while(true) {
  检查selector有没有事件；
  if (事件是channel可以读)：从产生事件的channel中读取数据； //channel类似于stream，但读写非阻塞。读写的数据放到buffer
  if (事件是channel可以写)：向产生事件的channel中写数据；
}
8)JVM锁
synchronized方法/代码块：JVM加锁，在os内核维护mutex，从用户态进入核心态，阻塞线程，切换，开销大。若只有一个线程进入临界区，偏向锁：用cas操作将thread id记录到obj header中的mark word，修改标识位。=》若有轻度竞争，两个线程进入临界区，轻量级锁：obj恢复到无锁状态，在两线程的栈帧中分配Lock Record，将obj的mark word各复制一份，为displaced mark word。将线程1的LockRecord地址用cas放入obj mark word，说明t1获取锁。t2不阻塞，自旋几次等待。t1释放锁时，将displaced mark word用cas写回obj，t2可加锁。=》若自旋次数太多，重量级锁：jvm创建monitor对象，依赖于os mutex lock，将monitor地址cas到obj mark word，没有锁的线程阻塞等待。
9)函数式编程 lambda
s->s.toUpperCase();  (x,y)->x+y;   ()->System.out.println("hi"); 左边为参数，右边为方法体  匿名函数
类型推断：
interface Funtion<T,R> {R apply(T t);}   参数类型T，返回类型R
interface Predicate<T> {boolean test(T t);}   参数类型T，返回boolean
interface Consumer<T> {void accept(T t);}  参数类型T，无返回
Stream：延迟计算/惰性求值
Arrays.asList("hello","hi","Nihao").stream().  //parallelStream()，parallelSort()等并行化，自动数据分块，分配到cpu core，再收集结果。但并行效果依赖于数据是否容易分块，是否cpu密集任务，有没有io操作等。
  map(s->{
    System.out.println(s);
    return s.toUpperCase();
  }).filter(s->s.startsWith("h")) //map、filter惰性求值函数，返回stream。系统先取stream的第一个元素，map将其转为大写，filter判断是否h开头，若是进入forEach，否则取下一元素。
  .forEach(s->System.out.println(s));       //forEach是立即求值函数

19. http
1) http server
1.0: 通过socket建立tcp连接。监听80,读写数据会阻塞
2.0：accept连接后，创建子进程处理socket，主进程可持续监听。进程开销大。
3.0: select。单进程，accept后，将socket fd发给os，阻塞。os后台检查，标记可读写的socket，唤醒进程。进程遍历所有的fd，处理有标记的socket数据，再次通知socket fd，阻塞。每次最多1024个fd。
4.0：epoll。os仅通知可读写的socket，不用遍历。
2) https：443
浏览器发起https://xx.com请求；
server发送数字证书（包括server public key）；
browser用预置的CA列表验证证书，若有问题，提示风险； //保证server正确。公钥+其他信息，经过hash，得到消息摘要，用CA private key加密，得到数字签名。
browser随机生成对称密钥，用server public key加密；
server用private key解密，得到对称密钥；  //每次发送都用对方的public key加密，接收都自己的private key解密，速度太慢
双方用对称密钥通信。

20. mail
C/S:client可以通过server收发邮件。server接收，存储，转发。sender,list<receiver>,title,content,list<cc>,list<bcc>
协议：建立连接，端口。内容编码：base64，将二进制数据转为a-z、A-Z、0-9、+、/、=等字符组成的数据。发信SMTP，收信POP。
附件：内容类型：ContentType=主类型/子类型，可扩展。boundary。encoding。
跨server：a用SMTP发给A.com server；A.com发现b@B.com不在本server，将mail缓存到queue；A取mail，用SMTP发给B.com，若失败，给a发失败消息。B.com收到后，存到b的邮箱中，b用POP收取。

21. sso
1) 共享cookie+共享session：cookie不能跨域：a.com产生的cookie，浏览器不能发到b.com。若将cookie放到一级域名下，xx.company.com，可在不同子系统间共享cookie。各子系统的server要共享redis中的session数据。
2) cookie+token：用户在系统1登录，server在cookie中写token(header+userid)，用hash+密钥生成签名作为token的一部分。用户用token访问系统2,server收到token，用hash+密钥算签名，若和token中签名不同，说明被篡改了。否则取出userid即可。要求不同子系统的密钥、hash算法一致，且userid相同。不需要保存session，只需要计算、验证，无状态。
3) 认证中心cas：用户访问www.a.com/page1，若没有登录，302重定向到www.sso.com/login?redirect=www.a.com/page1。用户在认证中心登录，建立session，建立随机字符串ticket，重定向到www.a.com/page1?ticket=xxx，且cookie为ssoid=123,sso.com。用户访问page1，server用ticket到认证中心验证，获取userid、ptoken、ptlogout等信息，若有效则建立session，返回页面，cookie为sessionid=456,a.com。用户访问www.a.com/page2，带a.com的cookie，登录过。用户访问www.b.com/page3，重定向到sso.com，带ssoid的cookie。认证中心返回ticket=yyy，重定向到page3。page3再到sso验证ticket，有效则建立session。
退出：a系统退出时，用ptoken通知sso退出。sso验证ptoken与本地一致，退出。再用ptlogout调用b系统的退出接口，双方一致时，b退出。
开放平台oauth：第三方app来注册，分配appid、key。用户登录第三方app，跳转到本平台www.platform.com/xxx?appid=xx&return_uri=https:www.a.com/callback,输用户名/psw，认证后，跳转回app，https://www.a.com/callback#token=xxx,带token。app可带token，通过api访问平台数据。#为hash fragment，停留在browser，只有js能访问，且不会用http request发到别的server。但token是明文，可在浏览器历史/日志中找到，不安全 =》隐藏token：平台返回https://www.a.com/callback?code=xxx。app server将code、appid、app key发到平台，申请token，不经过browser。

22.web安全
XSS：在输入框输入js代码，提交则保存到server，下次展示页面时执行。=》cookie中加HttpOnly，禁止js读取cookie。server过滤输入，去掉<,>,或编码转义<变成&lt。
SQL注入：不拼接字符串，用预编译语句，绑定变量。  密码+随机数salt（单独列），用hash计算。salt固定，会有重放攻击 =》加验证码 captcha。browser：hash(psw,salt)->hash_psw1，再计算hash(hash_psw1,captcha)->hash_psw2，只将psw2发给server。server：验证captcha是否正确；根据userid从db获取hash_psw，hash(hash_psw,captcha)->hash_psw3，比较psw2和3是否相同。

23. h=hash（key）
确定性（若h不同则key一定不同）；碰撞（h相同key也不一定相同）；不可逆；混淆（改变部分key得到完全不同h）
md5:不定长信息映射到128bit固定长度。eg. bittorrent用来检测碎片的完整性。
sha1:160bit。eg. https的SSL中。
冲突解决方法：open addressing，包括linear probing（数据增多，冲突可能性越来越大，探测时间最坏n），quadratic probing，double hashing；chaining。










